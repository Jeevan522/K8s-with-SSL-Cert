Source:

https://github.com/rameshp1234567/kubernetes-letsencrypt

# Reference document:
https://github.com/marcel-dempers/docker-development-youtube-series/blob/master/kubernetes/cert-manager/README.md 

# Follow the below steps to create cert for app using ingress along with lets encrypt

# get cert-manager (Sometimes the version might cause issue for get the pods. Get the latest from cert-manager url)
curl -LO https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.yaml

or 

kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml

URL: https://cert-manager.io/docs/installation/kubectl/#prerequisites

mv cert-manager.yaml cert-manager-1.0.4.yaml

# install cert-manager 

kubectl apply --validate=false -f cert-manager-1.0.4.yaml

kubectl -n cert-manager get all

# Ingress Controller

# Let's deploy an Ingress controller

kubectl create ns ingress-nginx

kubectl -n ingress-nginx apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml

kubectl -n ingress-nginx get pods

# Output:
NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-gggwk        0/1     Completed   0          42s
ingress-nginx-admission-patch-84qfl         0/1     Completed   0          42s
ingress-nginx-controller-54d8b558d4-qgl8h   1/1     Running     0          46s

# Create Let's Encrypt Issuer for our cluster

kubectl apply -f cert-issuer-nginx-ingress.yaml

# check the issuer
kubectl describe clusterissuer letsencrypt-cluster-issuer

# Deploy a pod that uses SSL

kubectl apply -f deployments.yaml
kubectl apply -f services.yaml
kubectl get pods

# deploy an ingress route
kubectl apply -f ingress.yaml

# Issue Certificate
kubectl apply -f certificate.yaml

# check the cert has been issued 
kubectl describe certificate hello

# TLS created as a secret

kubectl get secrets
NAME                  TYPE                                  DATA   AGE
example-app-tls       kubernetes.io/tls                     2      84m

# create a dns name using public ip address created by cluster
# Find the public ip address (EXTERNAL-IP)
kubectl get svc -n ingress-nginx
# Output:
NAME                                 TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE
ingress-nginx-controller             LoadBalancer   10.0.127.192   20.81.112.9   80:30209/TCP,443:32655/TCP   120m
ingress-nginx-controller-admission   ClusterIP      10.0.218.123   <none>        443/TCP                      120m

#Find the same public ip adress (EXTERNAL-IP) from resource group created automatically by the same cluster
1. Open Public IP Address
2. Go to Configuration
3. add the DNS name as "helloworldz"
4. Save & run the app https://helloworldz.eastus.cloudapp.azure.com
